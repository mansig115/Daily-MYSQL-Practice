**Joins**

SELECT *  FROM trades T join users U on T.user_id = U.user_id;

2--write a SQL JOIN query to find the top three cities that have the highest number of completed trade orders.

SELECT U.city, count(T.order_id) as total_orders FROM trades T inner join users U on 
T.user_id = U.user_id
 where T.status = 'Completed' 
 Group by U.city
Order by total_orders desc LIMIT 3;

3. Write a query to return the IDs of the Facebook pages that have zero likes. The output should be sorted in ascending order based on the page IDs.

SELECT P.page_id FROM pages P left join page_likes  PL
on P.page_id = PL.page_id
where PL.page_id IS NULL
order by page_id ASC;

4. SQL JOIN with CASE WHEN
Write a query to update the payment status of Facebook advertisers based on the information in the daily_pay table. The output should include the user ID and their current payment status, sorted by the user id.

SELECT COALESCE(advertiser.user_id, daily_pay.user_id) AS user_id, 
 CASE 
    WHEN paid IS NULL THEN 'CHURN' 
    WHEN paid IS NOT NULL AND advertiser.status IN ('NEW','EXISTING','RESURRECT') THEN 'EXISTING'
    WHEN paid IS NOT NULL AND advertiser.status = 'CHURN' THEN 'RESURRECT'
    WHEN paid IS NOT NULL AND advertiser.status IS NULL THEN 'NEW'
  END AS new_status
FROM advertiser
FULL OUTER JOIN daily_pay
  ON advertiser.user_id = daily_pay.user_id

order by user_id;


Strata Practice--
5. SELECT ABS(MAX(CASE
                   WHEN dept.department = 'marketing' THEN emp.salary
               END) - MAX(CASE
                              WHEN dept.department = 'engineering' THEN emp.salary
                          END)) AS salary_difference
FROM db_employee emp
JOIN db_dept dept ON emp.department_id = dept.id
WHERE dept.department IN ('marketing',
                          'engineering');

6. We have a table with employees and their salaries, however, some of the records are old and contain outdated salary information. 
Find the current salary of each employee assuming that salaries increase each year. Output their id, first name, last name, department ID, and current salary. 
Order your list by employee ID in ascending order.

select id, first_name, last_name, department_id, max(salary) as salary  from ms_employee_salary
group by 
id, first_name, last_name, department_id order by id asc;

7. Find the last time each bike was in use. 
Output both the bike number and the date-timestamp of the bike's last use (i.e., the date-time the bike was returned).
Order the results by bikes that were most recently used.

select bike_number, max(end_time) as last_used from dc_bikeshare_q1_2012
group by bike_number order by last_used desc;

8. Find how many reviews exist for each review score given to 'Hotel Arena'. Output the hotel name ('Hotel Arena'),
each review score, and the number of reviews for that score. Ensure the results only include 'Hotel Arena.'

select hotel_name, reviewer_score, count(*) as count from hotel_reviews
where hotel_name = 'Hotel Arena' group by hotel_name, reviewer_score;

9. Count the number of movies for which Abigail Breslin was nominated for an Oscar.

select count(distinct movie) as n_movies_by_abi from oscar_nominees where nominee = 'Abigail Breslin';

10.

SELECT DISTINCT
    p.*
FROM
    facebook_posts p
INNER JOIN
    facebook_reactions r 
ON
    p.post_id = r.post_id AND 
    r.reaction = 'heart';
